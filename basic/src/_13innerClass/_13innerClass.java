/*
   成员内部类 : 就是类中的一个普通成员
        外部类.内部类 = new 外部类().new 内部类();
        1 成员内部类中可以直接访问外部类的静态成员，也可以直接访问外部类的实例成员、方法
        2 成员内部类的实例方法中，可以直接拿到当前寄生的外部类对象：外部类名.this
            自己的对象：this
            寄生的外部类对象：外部类名.this

   静态内部类：有static修饰的内部类,属于外部类自己持有
        外部类名.内部类名 对象名 = new 外部类名.内部类名();
        1 静态内部类中可以访问外部类的静态成员、静态方法 （静态一般都可以）
        2 静态内部类中不可以访问直接外部类的实例成员、实例方法（间接：外部类对象.静态类）

   局部内部类：定义在方法中、代码块、构造器中
        没啥用

   匿名内部类：
        new 类或接口（参数值...）{
            类体（一般是方法重写）；
        };

 */
package _13innerClass;

public class _13innerClass {
    /*
        一个文件只能有一个 public 类
        保证文件名与 public 类一致，避免编译冲突
        public 类必须与文件名同名
        方便快速定位代码
        允许存在多个非 public 类
        支持内部类、工具类等封装需求
     */
    public static void main(String[] args) {
        //匿名内部类 实际上有名字：外部类名$编号.class
        //本质是一个子类 同时会立即构建一个子类对象
        Animal a=new Animal(){
            @Override
            public void cry() {
                System.out.println("叫");
            }
        };
        a.cry();
    }
}
